// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"

	"github.com/K3das/bigcord/scraping/store/schema"
	"github.com/bwmarrin/discordgo"
)

const clearAll = `-- name: ClearAll :exec
DELETE FROM states
`

// noinspection SqlWithoutWhere
func (q *Queries) ClearAll(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearAll)
	return err
}

const clearCompletedStates = `-- name: ClearCompletedStates :exec
DELETE
FROM states
WHERE state = 4
`

func (q *Queries) ClearCompletedStates(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearCompletedStates)
	return err
}

const clearState = `-- name: ClearState :exec
DELETE
FROM states
WHERE channel_id = ?
`

func (q *Queries) ClearState(ctx context.Context, channelID string) error {
	_, err := q.db.ExecContext(ctx, clearState, channelID)
	return err
}

const getState = `-- name: GetState :one
SELECT channel_id, guild_id, type, name, state, message_offset
FROM states
WHERE channel_id = ?
LIMIT 1
`

func (q *Queries) GetState(ctx context.Context, channelID string) (State, error) {
	row := q.db.QueryRowContext(ctx, getState, channelID)
	var i State
	err := row.Scan(
		&i.ChannelID,
		&i.GuildID,
		&i.Type,
		&i.Name,
		&i.State,
		&i.MessageOffset,
	)
	return i, err
}

const listStates = `-- name: ListStates :many
SELECT channel_id, guild_id, type, name, state, message_offset
FROM states
ORDER BY guild_id
`

func (q *Queries) ListStates(ctx context.Context) ([]State, error) {
	rows, err := q.db.QueryContext(ctx, listStates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []State
	for rows.Next() {
		var i State
		if err := rows.Scan(
			&i.ChannelID,
			&i.GuildID,
			&i.Type,
			&i.Name,
			&i.State,
			&i.MessageOffset,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setState = `-- name: SetState :exec
INSERT OR
REPLACE
INTO states (guild_id, channel_id, type, name, state, message_offset)
VALUES (?, ?, ?, ?, ?, ?)
`

type SetStateParams struct {
	GuildID       string
	ChannelID     string
	Type          discordgo.ChannelType
	Name          string
	State         schema.State
	MessageOffset string
}

func (q *Queries) SetState(ctx context.Context, arg SetStateParams) error {
	_, err := q.db.ExecContext(ctx, setState,
		arg.GuildID,
		arg.ChannelID,
		arg.Type,
		arg.Name,
		arg.State,
		arg.MessageOffset,
	)
	return err
}

const setStateIfNotCompleted = `-- name: SetStateIfNotCompleted :exec
UPDATE OR IGNORE states
SET state = ?
WHERE channel_id = ?
  AND state != 4
`

type SetStateIfNotCompletedParams struct {
	State     schema.State
	ChannelID string
}

func (q *Queries) SetStateIfNotCompleted(ctx context.Context, arg SetStateIfNotCompletedParams) error {
	_, err := q.db.ExecContext(ctx, setStateIfNotCompleted, arg.State, arg.ChannelID)
	return err
}
